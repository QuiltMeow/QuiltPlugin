package ew.quilt.patch;

import ew.quilt.plugin.Main;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPhysicsEvent;
import org.bukkit.inventory.ItemStack;

public class RailDropDuplicateExploit implements Listener {

    @EventHandler(priority = EventPriority.NORMAL)
    public void onBlockPhysicEvent(BlockPhysicsEvent event) {
        Block block = event.getBlock();
        Material material = block.getType();
        int type = 0;
        switch (material) {
            case RAILS:
            case POWERED_RAIL:
            case DETECTOR_RAIL:
            case ACTIVATOR_RAIL:
            case CARPET: {
                type = 1;
                break;
            }
        }
        if (type == 1) {
            Material changeMaterial = event.getChangedType();
            Block downBlock = block.getRelative(BlockFace.DOWN, 1);
            Material downMaterial = downBlock.getType();
            switch (downMaterial) {
                case SLIME_BLOCK:
                case PISTON_MOVING_PIECE:
                case PUMPKIN:
                case PISTON_STICKY_BASE:
                case PISTON_EXTENSION:
                case PISTON_BASE:
                case AIR: {
                    type = 2;
                    break;
                }
            }
            switch (changeMaterial) {
                case PUMPKIN:
                case SLIME_BLOCK:
                case PISTON_MOVING_PIECE:
                case PISTON_BASE:
                case PISTON_STICKY_BASE:
                case PISTON_EXTENSION:
                case DISPENSER:
                case DROPPER: {
                    type = 2;
                    break;
                }
            }
        }
        if (type == 2) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL)
    public void onBlockBreak(BlockBreakEvent event) {
        if (!event.isCancelled()) {
            Block block = event.getBlock();
            Block upBlock = block.getRelative(BlockFace.UP, 1);
            int type = 0;
            switch (upBlock.getType()) {
                case RAILS:
                case POWERED_RAIL:
                case DETECTOR_RAIL:
                case ACTIVATOR_RAIL:
                case CARPET: {
                    type = 1;
                    break;
                }
            }
            if (type == 1) {
                dropRailAir(block, upBlock);
            }
        }
    }

    private void dropRailAir(final Block block, final Block upBlock) {
        Bukkit.getServer().getScheduler().runTaskLater(Main.getPlugin(), new Runnable() {
            @Override
            public void run() {
                if (block.getType() == Material.AIR) {
                    int type = 0;
                    byte data = 0;
                    switch (upBlock.getType()) {
                        case RAILS: {
                            type = 1;
                            break;
                        }
                        case POWERED_RAIL: {
                            type = 2;
                            break;
                        }
                        case DETECTOR_RAIL: {
                            type = 3;
                            break;
                        }
                        case ACTIVATOR_RAIL: {
                            type = 4;
                            break;
                        }
                        case CARPET: {
                            type = 5;
                            data = upBlock.getData();
                            break;
                        }
                    }
                    if (type != 0) {
                        upBlock.setType(Material.AIR);
                        switch (type) {
                            case 1: {
                                block.getWorld().dropItemNaturally(block.getLocation(), new ItemStack(Material.RAILS, 1));
                                break;
                            }
                            case 2: {
                                block.getWorld().dropItemNaturally(block.getLocation(), new ItemStack(Material.POWERED_RAIL, 1));
                                break;
                            }
                            case 3: {
                                block.getWorld().dropItemNaturally(block.getLocation(), new ItemStack(Material.DETECTOR_RAIL, 1));
                                break;
                            }
                            case 4: {
                                block.getWorld().dropItemNaturally(block.getLocation(), new ItemStack(Material.ACTIVATOR_RAIL, 1));
                                break;
                            }
                            case 5: {
                                block.getWorld().dropItemNaturally(block.getLocation(), new ItemStack(Material.CARPET, 1, data));
                                break;
                            }
                        }
                    }
                }
            }
        }, 10);
    }
}
